{"version":3,"file":"index.mjs","sources":["../iter/awgn/lib/main.js","../iter/awgn/lib/index.js","../iter/awln/lib/main.js","../iter/awln/lib/index.js","../iter/awun/lib/main.js","../iter/awun/lib/index.js","../iter/bartlett-hann-pulse/lib/validate.js","../iter/bartlett-hann-pulse/lib/main.js","../iter/bartlett-hann-pulse/lib/index.js","../iter/bartlett-pulse/lib/validate.js","../iter/bartlett-pulse/lib/main.js","../iter/bartlett-pulse/lib/index.js","../iter/cosine-wave/lib/validate.js","../iter/cosine-wave/lib/main.js","../iter/cosine-wave/lib/index.js","../iter/dirac-comb/lib/validate.js","../iter/dirac-comb/lib/main.js","../iter/dirac-comb/lib/index.js","../iter/flat-top-pulse/lib/validate.js","../iter/flat-top-pulse/lib/main.js","../iter/flat-top-pulse/lib/index.js","../iter/hann-pulse/lib/validate.js","../iter/hann-pulse/lib/main.js","../iter/hann-pulse/lib/index.js","../iter/lanczos-pulse/lib/validate.js","../iter/lanczos-pulse/lib/main.js","../iter/lanczos-pulse/lib/index.js","../iter/periodic-sinc/lib/validate.js","../iter/periodic-sinc/lib/main.js","../iter/periodic-sinc/lib/index.js","../iter/pulse/lib/validate.js","../iter/pulse/lib/main.js","../iter/pulse/lib/index.js","../iter/sawtooth-wave/lib/validate.js","../iter/sawtooth-wave/lib/main.js","../iter/sawtooth-wave/lib/index.js","../iter/sine-wave/lib/validate.js","../iter/sine-wave/lib/main.js","../iter/sine-wave/lib/index.js","../iter/square-wave/lib/validate.js","../iter/square-wave/lib/main.js","../iter/square-wave/lib/index.js","../iter/triangle-wave/lib/validate.js","../iter/triangle-wave/lib/main.js","../iter/triangle-wave/lib/index.js","../iter/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar copy = require( '@stdlib/utils/copy' );\nvar noop = require( '@stdlib/utils/noop' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar randn = require( '@stdlib/random/base/improved-ziggurat' ).factory;\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawgn( iterator, sigma, options ) {\n\tvar rnorm;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trnorm = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( rnorm === void 0 ) {\n\t\trnorm = randn( opts );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rnorm.PRNG );\n\t}\n\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rnorm.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rnorm.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rnorm.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rnorm.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rnorm.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trnorm.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + ( sigma*rnorm() );\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawgn( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterawgn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white Gaussian noise (AWGN).\n*\n* @module @stdlib/simulate/iter/awgn\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n* var iterawgn = require( '@stdlib/simulate/iter/awgn' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar copy = require( '@stdlib/utils/copy' );\nvar noop = require( '@stdlib/utils/noop' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar laplace = require( '@stdlib/random/base/laplace' ).factory;\nvar format = require( '@stdlib/string/format' );\nvar SQRT_TWO = require( '@stdlib/constants/float64/sqrt-two' );\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterawln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white Laplacian noise (AWLN).\n*\n* @module @stdlib/simulate/iter/awln\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n* var iterawln = require( '@stdlib/simulate/iter/awln' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils/define-nonenumerable-read-write-accessor' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isUint32Array = require( '@stdlib/assert/is-uint32array' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar copy = require( '@stdlib/utils/copy' );\nvar noop = require( '@stdlib/utils/noop' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar format = require( '@stdlib/string/format' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar randu = require( '@stdlib/random/base/uniform' ).factory;\nvar SQRT_THREE = require( '@stdlib/constants/float64/sqrt-three' );\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white uniform noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a uniform distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = \\frac{(b-a)^2}{12}\n*     ```\n*\n*     where \\\\( a \\\\) is the minimum support and \\\\( b \\\\) is the maximum support.\n*\n* -   Accordingly, to generate uniform noise having zero mean and a desired standard deviation, we let \\\\( a = -b \\\\) and solve for \\\\( b \\\\).\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sigma &= \\frac{b-a}{\\sqrt{12}} \\\\\n*     \\sigma \\sqrt{12} &= b - a \\\\\n*     2 \\sigma \\sqrt{3} &= b - (-b) \\\\\n*     2 \\sigma \\sqrt{3} &= 2b \\\\\n*     b &= \\sigma \\sqrt{3}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( \\sigma \\\\) is the standard deviation.\n*\n* -   Thus, to generate uniform noise having zero mean and a desired standard deviation, we sample from \\\\( \\operatorname{unif}(-sigma\\sqrt{3}, sigma\\sqrt{3}) \\\\).\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawun( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawun( iterator, sigma, options ) {\n\tvar runif;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar a;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = copy( DEFAULTS );\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\ta = sigma * SQRT_THREE;\n\trunif = randu( -a, a, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', runif.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn runif.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn runif.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn runif.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn runif.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn runif.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trunif.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + runif();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawun( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterawun;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which introduces additive white uniform noise (AWUN).\n*\n* @module @stdlib/simulate/iter/awun\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n* var iterawun = require( '@stdlib/simulate/iter/awun' );\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawun( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar cospi = require( '@stdlib/math/base/special/cospi' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar A0 = 0.62;\nvar A1 = 0.48;\nvar A2 = 0.38;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a Bartlett-Hann window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {integer} T - period\n* @param {number} A - amplitude\n* @returns {number} function value\n*/\nfunction bartlettHann( t, T, A ) {\n\tT -= 1;\n\treturn A * ( A0 - (A1*abs( (t/T)-0.5) ) - (A2*cospi( (2.0/T)*t) ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? bartlettHann( t, opts.duration, opts.amplitude ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterBartlettHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @module @stdlib/simulate/iter/bartlett-hann-pulse\n*\n* @example\n* var iterBartlettHannPulse = require( '@stdlib/simulate/iter/bartlett-hann-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*(1.0-abs((s*t)-1.0)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterBartlettPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Bartlett pulse waveform.\n*\n* @module @stdlib/simulate/iter/bartlett-pulse\n*\n* @example\n* var iterBartlettPulse = require( '@stdlib/simulate/iter/bartlett-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar cospi = require( '@stdlib/math/base/special/cospi' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a cosine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterCosineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterCosineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * cospi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterCosineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterCosineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a cosine wave.\n*\n* @module @stdlib/simulate/iter/cosine-wave\n*\n* @example\n* var iterCosineWave = require( '@stdlib/simulate/iter/cosine-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterCosineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Dirac comb.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterDiracComb( opts );\n*\n* var v = iter.next().value;\n* // returns Infinity\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterDiracComb( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,T]\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': ( t === 0 ) ? PINF : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDiracComb( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterDiracComb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Dirac comb.\n*\n* @module @stdlib/simulate/iter/dirac-comb\n*\n* @example\n* var iterDiracComb = require( '@stdlib/simulate/iter/dirac-comb' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterDiracComb( opts );\n*\n* var v = iter.next().value;\n* // returns Infinity\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar cospi = require( '@stdlib/math/base/special/cospi' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar A0 = 0.21557895;\nvar A1 = 0.41663158;\nvar A2 = 0.277263158;\nvar A3 = 0.083578947;\nvar A4 = 0.006947368;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the flat top window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {number} A - amplitude\n* @param {integer} tau - period\n* @returns {number} function value\n*/\nfunction flatTop( t, A, tau ) {\n\tvar s = 2.0 / (tau-1);\n\treturn A * (A0 - (A1*cospi(s*t)) + (A2*cospi(2.0*s*t)) - (A3*cospi(3.0*s*t)) + (A4*cospi(4.0*s*t))); // eslint-disable-line max-len\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a flat top pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterFlatTopPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterFlatTopPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? flatTop( t, opts.amplitude, opts.duration ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFlatTopPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterFlatTopPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a flat top pulse waveform.\n*\n* @module @stdlib/simulate/iter/flat-top-pulse\n*\n* @example\n* var iterFlatTopPulse = require( '@stdlib/simulate/iter/flat-top-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterFlatTopPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar cospi = require( '@stdlib/math/base/special/cospi' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar A;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tA = 0.5 * opts.amplitude;\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? A*(1.0-cospi(s*t)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Hann pulse waveform.\n*\n* @module @stdlib/simulate/iter/hann-pulse\n*\n* @example\n* var iterHannPulse = require( '@stdlib/simulate/iter/hann-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar sinc = require( '@stdlib/math/base/special/sinc' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Lanczos pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterLanczosPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterLanczosPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.' , 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*sinc((s*t)-1.0) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLanczosPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterLanczosPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a Lanczos pulse waveform.\n*\n* @module @stdlib/simulate/iter/lanczos-pulse\n*\n* @example\n* var iterLanczosPulse = require( '@stdlib/simulate/iter/lanczos-pulse' );\n*\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterLanczosPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isEven = require( '@stdlib/math/base/assert/is-even' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar sinpi = require( '@stdlib/math/base/special/sinpi' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a periodic sinc waveform.\n*\n* ## Method\n*\n* -   The periodic sinc function, or Dirichlet function, is defined as\n*\n*     ```tex\n*     D_N(x; A) = \\begin{cases}\n*     A \\cdot \\frac{\\sin(Nx/2)}{N\\sin(x/2)} & x \\neq 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots \\\\\n*     A \\cdot (-1)^{k(N-1)} & x = 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots\n*     \\end{cases}\n*     ```\n*\n*     where, for odd \\\\( N \\\\), the waveform period is \\\\( 2\\pi \\\\), and, for even \\\\( N \\\\), the waveform period is \\\\( 4\\pi \\\\).\n*\n* -   In order to evaluate the periodic sinc function in terms of an iteration number \\\\( t \\\\) and a specified period (period \\\\( \\tau \\\\)), rather than radians, for odd \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{2\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and, for even \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{4\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and substitute accordingly.\n*\n* @param {PositiveInteger} n - order\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterPeriodicSinc( 7 );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterPeriodicSinc( n, options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar sgn;\n\tvar hwf;\n\tvar hw;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\topts = {\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tif ( isEven( n ) ) {\n\t\tif ( opts.offset >= 0 ) {\n\t\t\tsgn = -1.0;\n\t\t} else {\n\t\t\tsgn = 1.0;\n\t\t}\n\t\t// Note: when `n` is even, the waveform period (in radians) is 4π, so we need to adjust the \"period\" parameter to ensure that the waveform repeats within the specified number of iterations:\n\t\thw = opts.period / 2;\n\t\thwf = floor( hw ); // note: τ could be an odd number; in which case, negative peaks happen \"between\" two iterations (t%τ and t%(τ+1))\n\t\ts = n / hw;\n\t} else {\n\t\ts = n / opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', ( sgn === void 0 ) ? next2 : next1 );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 || t === hw ) {\n\t\t\tsgn *= -1.0;\n\t\t\tv = sgn * opts.amplitude;\n\t\t} else {\n\t\t\tif ( t === hwf ) {\n\t\t\t\t// We just passed a negative peak, so we need flip the sign in order to ensure that the waveform at `t%τ=0` is the correct sign:\n\t\t\t\tsgn *= -1.0;\n\t\t\t}\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/hw) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 ) {\n\t\t\tv = opts.amplitude;\n\t\t} else {\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/opts.period) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPeriodicSinc( n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterPeriodicSinc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a periodic sinc waveform.\n*\n* @module @stdlib/simulate/iter/periodic-sinc\n*\n* @example\n* var iterPeriodicSinc = require( '@stdlib/simulate/iter/periodic-sinc' );\n*\n* var iter = iterPeriodicSinc( 7 );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar format = require( '@stdlib/string/format' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=floor(options.period/2)] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min=0.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 10,\n\t\t'min': 0.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = floor( opts.period/2 );\n\t}\n\tif ( opts.duration >= opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than the period. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a pulse waveform.\n*\n* @module @stdlib/simulate/iter/pulse\n*\n* @example\n* var iterPulse = require( '@stdlib/simulate/iter/pulse' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar tan = require( '@stdlib/math/base/special/tan' );\nvar atan = require( '@stdlib/math/base/special/atan' );\nvar HALF_PI = require( '@stdlib/constants/float64/half-pi' );\nvar PI = require( '@stdlib/constants/float64/pi' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sawtooth wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\nfunction iterSawtoothWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = PI / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * atan( tan( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSawtoothWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterSawtoothWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a sawtooth wave.\n*\n* @module @stdlib/simulate/iter/sawtooth-wave\n*\n* @example\n* var iterSawtoothWave = require( '@stdlib/simulate/iter/sawtooth-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar sinpi = require( '@stdlib/math/base/special/sinpi' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterSineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * sinpi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterSineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a sine wave.\n*\n* @module @stdlib/simulate/iter/sine-wave\n*\n* @example\n* var iterSineWave = require( '@stdlib/simulate/iter/sine-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isEven = require( '@stdlib/math/base/assert/is-even' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a square wave repeats\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) || !isEven( options.period ) ) { // eslint-disable-line max-len\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive even integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a square wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a square wave repeats (this must be a positive even integer)\n* @param {number} [options.min=-1.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterSquareWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar h;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'min': -1.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\th = opts.period / 2;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\treturn {\n\t\t\t'value': ( (t%opts.period) < h ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSquareWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterSquareWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a square wave.\n*\n* @module @stdlib/simulate/iter/square-wave\n*\n* @example\n* var iterSquareWave = require( '@stdlib/simulate/iter/square-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar sinpi = require( '@stdlib/math/base/special/sinpi' );\nvar asin = require( '@stdlib/math/base/special/asin' );\nvar HALF_PI = require( '@stdlib/constants/float64/half-pi' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a triangle wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterTriangleWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterTriangleWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * asin( sinpi( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterTriangleWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterTriangleWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which generates a triangle wave.\n*\n* @module @stdlib/simulate/iter/triangle-wave\n*\n* @example\n* var iterTriangleWave = require( '@stdlib/simulate/iter/triangle-wave' );\n*\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterTriangleWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterawgn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awgn}\n*/\nsetReadOnly( ns, 'iterawgn', require( './../../iter/awgn' ) );\n\n/**\n* @name iterawln\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awln}\n*/\nsetReadOnly( ns, 'iterawln', require( './../../iter/awln' ) );\n\n/**\n* @name iterawun\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awun}\n*/\nsetReadOnly( ns, 'iterawun', require( './../../iter/awun' ) );\n\n/**\n* @name iterBartlettHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-hann-pulse}\n*/\nsetReadOnly( ns, 'iterBartlettHannPulse', require( './../../iter/bartlett-hann-pulse' ) );\n\n/**\n* @name iterBartlettPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-pulse}\n*/\nsetReadOnly( ns, 'iterBartlettPulse', require( './../../iter/bartlett-pulse' ) );\n\n/**\n* @name iterCosineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/cosine-wave}\n*/\nsetReadOnly( ns, 'iterCosineWave', require( './../../iter/cosine-wave' ) );\n\n/**\n* @name iterDiracComb\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/dirac-comb}\n*/\nsetReadOnly( ns, 'iterDiracComb', require( './../../iter/dirac-comb' ) );\n\n/**\n* @name iterFlatTopPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/flat-top-pulse}\n*/\nsetReadOnly( ns, 'iterFlatTopPulse', require( './../../iter/flat-top-pulse' ) );\n\n/**\n* @name iterHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/hann-pulse}\n*/\nsetReadOnly( ns, 'iterHannPulse', require( './../../iter/hann-pulse' ) );\n\n/**\n* @name iterLanczosPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/lanczos-pulse}\n*/\nsetReadOnly( ns, 'iterLanczosPulse', require( './../../iter/lanczos-pulse' ) );\n\n/**\n* @name iterPeriodicSinc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/periodic-sinc}\n*/\nsetReadOnly( ns, 'iterPeriodicSinc', require( './../../iter/periodic-sinc' ) );\n\n/**\n* @name iterPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/pulse}\n*/\nsetReadOnly( ns, 'iterPulse', require( './../../iter/pulse' ) );\n\n/**\n* @name iterSawtoothWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sawtooth-wave}\n*/\nsetReadOnly( ns, 'iterSawtoothWave', require( './../../iter/sawtooth-wave' ) );\n\n/**\n* @name iterSineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sine-wave}\n*/\nsetReadOnly( ns, 'iterSineWave', require( './../../iter/sine-wave' ) );\n\n/**\n* @name iterSquareWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/square-wave}\n*/\nsetReadOnly( ns, 'iterSquareWave', require( './../../iter/square-wave' ) );\n\n/**\n* @name iterTriangleWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/triangle-wave}\n*/\nsetReadOnly( ns, 'iterTriangleWave', require( './../../iter/triangle-wave' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterators\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/simulate/iter}\n*/\nsetReadOnly( ns, 'iterators', require( './../iter' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],"names":["setReadOnly","require$$0","setReadOnlyAccessor","require$$1","setReadWriteAccessor","require$$2","isIteratorLike","require$$3","isPositiveNumber","require$$4","isPrimitive","isPlainObject","require$$5","isFunction","require$$6","isBoolean","require$$7","isUint32Array","require$$8","hasOwnProp","require$$9","copy","require$$10","noop","require$$11","constantFunction","require$$12","iteratorSymbol","require$$13","format","require$$14","randn","require$$15","factory","DEFAULTS","require$$16","main","iterawgn","iterator","sigma","options","rnorm","opts","iter","FLG","TypeError","arguments","length","prng","state","seed","next","end","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","s","v","done","value","NaN","lib","laplace","SQRT_TWO","require$$17","iterawln","rlaplace","randu","SQRT_THREE","iterawun","runif","a","isInteger","isPositiveInteger","isNonNegativeInteger","abs","cospi","validate","duration","period","amplitude","offset","bartlettHann","t","T","A","iterBartlettHannPulse","err","i","RangeError","iterBartlettPulse","isNonNegativeNumber","iterCosineWave","PINF","iterDiracComb","flatTop","tau","iterFlatTopPulse","iterHannPulse","sinc","iterLanczosPulse","validate_1","isEven","sinpi","floor","iterPeriodicSinc","n","sgn","hwf","hw","next2","next1","isNumber","isnan","min","max","iterPulse","tan","atan","HALF_PI","PI","iterSawtoothWave","iterSineWave","iterSquareWave","h","asin","iterTriangleWave","ns"],"mappings":"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"}