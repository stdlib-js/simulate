{"version":3,"file":"index.mjs","sources":["../iter/bartlett-hann-pulse/lib/validate.js","../iter/bartlett-hann-pulse/lib/main.js","../iter/bartlett-pulse/lib/validate.js","../iter/cosine-wave/lib/validate.js","../iter/dirac-comb/lib/validate.js","../iter/flat-top-pulse/lib/validate.js","../iter/flat-top-pulse/lib/main.js","../iter/hann-pulse/lib/validate.js","../iter/lanczos-pulse/lib/validate.js","../iter/periodic-sinc/lib/validate.js","../iter/pulse/lib/validate.js","../iter/sawtooth-wave/lib/validate.js","../iter/sine-wave/lib/validate.js","../iter/square-wave/lib/validate.js","../iter/triangle-wave/lib/validate.js","../iter/lib/index.js","../iter/awgn/lib/main.js","../iter/awgn/lib/defaults.js","../iter/awln/lib/main.js","../iter/awln/lib/defaults.js","../iter/awun/lib/main.js","../iter/awun/lib/defaults.js","../iter/bartlett-pulse/lib/main.js","../iter/cosine-wave/lib/main.js","../iter/dirac-comb/lib/main.js","../iter/hann-pulse/lib/main.js","../iter/lanczos-pulse/lib/main.js","../iter/periodic-sinc/lib/main.js","../iter/pulse/lib/main.js","../iter/sawtooth-wave/lib/main.js","../iter/sine-wave/lib/main.js","../iter/square-wave/lib/main.js","../iter/triangle-wave/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport abs from '@stdlib/math/base/special/abs';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar A0 = 0.62;\nvar A1 = 0.48;\nvar A2 = 0.38;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a Bartlett-Hann window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {integer} T - period\n* @param {number} A - amplitude\n* @returns {number} function value\n*/\nfunction bartlettHann( t, T, A ) {\n\tT -= 1;\n\treturn A * ( A0 - (A1*abs( (t/T)-0.5) ) - (A2*cospi( (2.0/T)*t) ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? bartlettHann( t, opts.duration, opts.amplitude ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterBartlettHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar A0 = 0.21557895;\nvar A1 = 0.41663158;\nvar A2 = 0.277263158;\nvar A3 = 0.083578947;\nvar A4 = 0.006947368;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the flat top window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {number} A - amplitude\n* @param {integer} tau - period\n* @returns {number} function value\n*/\nfunction flatTop( t, A, tau ) {\n\tvar s = 2.0 / (tau-1);\n\treturn A * (A0 - (A1*cospi(s*t)) + (A2*cospi(2.0*s*t)) - (A3*cospi(3.0*s*t)) + (A4*cospi(4.0*s*t))); // eslint-disable-line max-len\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a flat top pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterFlatTopPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterFlatTopPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? flatTop( t, opts.amplitude, opts.duration ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFlatTopPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterFlatTopPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isEven from '@stdlib/math/base/assert/is-even';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a square wave repeats\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) || !isEven( options.period ) ) { // eslint-disable-line max-len\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive even integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterawgn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awgn}\n*/\nimport iterawgn from './../../iter/awgn';\nsetReadOnly( ns, 'iterawgn', iterawgn );\n\n/**\n* @name iterawln\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awln}\n*/\nimport iterawln from './../../iter/awln';\nsetReadOnly( ns, 'iterawln', iterawln );\n\n/**\n* @name iterawun\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awun}\n*/\nimport iterawun from './../../iter/awun';\nsetReadOnly( ns, 'iterawun', iterawun );\n\n/**\n* @name iterBartlettHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-hann-pulse}\n*/\nimport iterBartlettHannPulse from './../../iter/bartlett-hann-pulse';\nsetReadOnly( ns, 'iterBartlettHannPulse', iterBartlettHannPulse );\n\n/**\n* @name iterBartlettPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-pulse}\n*/\nimport iterBartlettPulse from './../../iter/bartlett-pulse';\nsetReadOnly( ns, 'iterBartlettPulse', iterBartlettPulse );\n\n/**\n* @name iterCosineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/cosine-wave}\n*/\nimport iterCosineWave from './../../iter/cosine-wave';\nsetReadOnly( ns, 'iterCosineWave', iterCosineWave );\n\n/**\n* @name iterDiracComb\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/dirac-comb}\n*/\nimport iterDiracComb from './../../iter/dirac-comb';\nsetReadOnly( ns, 'iterDiracComb', iterDiracComb );\n\n/**\n* @name iterFlatTopPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/flat-top-pulse}\n*/\nimport iterFlatTopPulse from './../../iter/flat-top-pulse';\nsetReadOnly( ns, 'iterFlatTopPulse', iterFlatTopPulse );\n\n/**\n* @name iterHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/hann-pulse}\n*/\nimport iterHannPulse from './../../iter/hann-pulse';\nsetReadOnly( ns, 'iterHannPulse', iterHannPulse );\n\n/**\n* @name iterLanczosPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/lanczos-pulse}\n*/\nimport iterLanczosPulse from './../../iter/lanczos-pulse';\nsetReadOnly( ns, 'iterLanczosPulse', iterLanczosPulse );\n\n/**\n* @name iterPeriodicSinc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/periodic-sinc}\n*/\nimport iterPeriodicSinc from './../../iter/periodic-sinc';\nsetReadOnly( ns, 'iterPeriodicSinc', iterPeriodicSinc );\n\n/**\n* @name iterPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/pulse}\n*/\nimport iterPulse from './../../iter/pulse';\nsetReadOnly( ns, 'iterPulse', iterPulse );\n\n/**\n* @name iterSawtoothWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sawtooth-wave}\n*/\nimport iterSawtoothWave from './../../iter/sawtooth-wave';\nsetReadOnly( ns, 'iterSawtoothWave', iterSawtoothWave );\n\n/**\n* @name iterSineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sine-wave}\n*/\nimport iterSineWave from './../../iter/sine-wave';\nsetReadOnly( ns, 'iterSineWave', iterSineWave );\n\n/**\n* @name iterSquareWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/square-wave}\n*/\nimport iterSquareWave from './../../iter/square-wave';\nsetReadOnly( ns, 'iterSquareWave', iterSquareWave );\n\n/**\n* @name iterTriangleWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/triangle-wave}\n*/\nimport iterTriangleWave from './../../iter/triangle-wave';\nsetReadOnly( ns, 'iterTriangleWave', iterTriangleWave );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport { factory as randn } from '@stdlib/random/base/improved-ziggurat';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawgn( iterator, sigma, options ) {\n\tvar rnorm;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trnorm = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( rnorm === void 0 ) {\n\t\trnorm = randn( opts );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rnorm.PRNG );\n\t}\n\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rnorm.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rnorm.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rnorm.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rnorm.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rnorm.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trnorm.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + ( sigma*rnorm() );\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawgn( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawgn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport { factory as laplace } from '@stdlib/random/base/laplace';\nimport format from '@stdlib/string/format';\nimport SQRT_TWO from '@stdlib/constants/float64/sqrt-two';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport format from '@stdlib/string/format';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport { factory as randu } from '@stdlib/random/base/uniform';\nimport SQRT_THREE from '@stdlib/constants/float64/sqrt-three';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white uniform noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a uniform distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = \\frac{(b-a)^2}{12}\n*     ```\n*\n*     where \\\\( a \\\\) is the minimum support and \\\\( b \\\\) is the maximum support.\n*\n* -   Accordingly, to generate uniform noise having zero mean and a desired standard deviation, we let \\\\( a = -b \\\\) and solve for \\\\( b \\\\).\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sigma &= \\frac{b-a}{\\sqrt{12}} \\\\\n*     \\sigma \\sqrt{12} &= b - a \\\\\n*     2 \\sigma \\sqrt{3} &= b - (-b) \\\\\n*     2 \\sigma \\sqrt{3} &= 2b \\\\\n*     b &= \\sigma \\sqrt{3}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( \\sigma \\\\) is the standard deviation.\n*\n* -   Thus, to generate uniform noise having zero mean and a desired standard deviation, we sample from \\\\( \\operatorname{unif}(-sigma\\sqrt{3}, sigma\\sqrt{3}) \\\\).\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawun( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawun( iterator, sigma, options ) {\n\tvar runif;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar a;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\ta = sigma * SQRT_THREE;\n\trunif = randu( -a, a, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', runif.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn runif.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn runif.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn runif.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn runif.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn runif.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trunif.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + runif();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawun( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawun;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport abs from '@stdlib/math/base/special/abs';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*(1.0-abs((s*t)-1.0)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterBartlettPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a cosine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterCosineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterCosineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * cospi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterCosineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterCosineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Dirac comb.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterDiracComb( opts );\n*\n* var v = iter.next().value;\n* // returns Infinity\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterDiracComb( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,T]\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': ( t === 0 ) ? PINF : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDiracComb( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterDiracComb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar A;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tA = 0.5 * opts.amplitude;\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? A*(1.0-cospi(s*t)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport sinc from '@stdlib/math/base/special/sinc';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Lanczos pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterLanczosPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterLanczosPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*sinc((s*t)-1.0) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLanczosPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterLanczosPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport isEven from '@stdlib/math/base/assert/is-even';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport floor from '@stdlib/math/base/special/floor';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a periodic sinc waveform.\n*\n* ## Method\n*\n* -   The periodic sinc function, or Dirichlet function, is defined as\n*\n*     ```tex\n*     D_N(x; A) = \\begin{cases}\n*     A \\cdot \\frac{\\sin(Nx/2)}{N\\sin(x/2)} & x \\neq 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots \\\\\n*     A \\cdot (-1)^{k(N-1)} & x = 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots\n*     \\end{cases}\n*     ```\n*\n*     where, for odd \\\\( N \\\\), the waveform period is \\\\( 2\\pi \\\\), and, for even \\\\( N \\\\), the waveform period is \\\\( 4\\pi \\\\).\n*\n* -   In order to evaluate the periodic sinc function in terms of an iteration number \\\\( t \\\\) and a specified period (period \\\\( \\tau \\\\)), rather than radians, for odd \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{2\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and, for even \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{4\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and substitute accordingly.\n*\n* @param {PositiveInteger} n - order\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterPeriodicSinc( 7 );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterPeriodicSinc( n, options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar sgn;\n\tvar hwf;\n\tvar hw;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\topts = {\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tif ( isEven( n ) ) {\n\t\tif ( opts.offset >= 0 ) {\n\t\t\tsgn = -1.0;\n\t\t} else {\n\t\t\tsgn = 1.0;\n\t\t}\n\t\t// Note: when `n` is even, the waveform period (in radians) is 4π, so we need to adjust the \"period\" parameter to ensure that the waveform repeats within the specified number of iterations:\n\t\thw = opts.period / 2;\n\t\thwf = floor( hw ); // note: τ could be an odd number; in which case, negative peaks happen \"between\" two iterations (t%τ and t%(τ+1))\n\t\ts = n / hw;\n\t} else {\n\t\ts = n / opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', ( sgn === void 0 ) ? next2 : next1 );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 || t === hw ) {\n\t\t\tsgn *= -1.0;\n\t\t\tv = sgn * opts.amplitude;\n\t\t} else {\n\t\t\tif ( t === hwf ) {\n\t\t\t\t// We just passed a negative peak, so we need flip the sign in order to ensure that the waveform at `t%τ=0` is the correct sign:\n\t\t\t\tsgn *= -1.0;\n\t\t\t}\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/hw) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 ) {\n\t\t\tv = opts.amplitude;\n\t\t} else {\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/opts.period) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPeriodicSinc( n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterPeriodicSinc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport floor from '@stdlib/math/base/special/floor';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=floor(options.period/2)] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min=0.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 10,\n\t\t'min': 0.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = floor( opts.period/2 );\n\t}\n\tif ( opts.duration >= opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than the period. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport tan from '@stdlib/math/base/special/tan';\nimport atan from '@stdlib/math/base/special/atan';\nimport HALF_PI from '@stdlib/constants/float64/half-pi';\nimport PI from '@stdlib/constants/float64/pi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sawtooth wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\nfunction iterSawtoothWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = PI / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * atan( tan( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSawtoothWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSawtoothWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterSineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * sinpi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a square wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a square wave repeats (this must be a positive even integer)\n* @param {number} [options.min=-1.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterSquareWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar h;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'min': -1.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\th = opts.period / 2;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\treturn {\n\t\t\t'value': ( (t%opts.period) < h ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSquareWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSquareWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport asin from '@stdlib/math/base/special/asin';\nimport HALF_PI from '@stdlib/constants/float64/half-pi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a triangle wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterTriangleWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterTriangleWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * asin( sinpi( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterTriangleWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterTriangleWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterators\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/simulate/iter}\n*/\nimport iterators from './../iter';\nsetReadOnly( ns, 'iterators', iterators );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["validate","opts","options","isPlainObject","hasOwnProp","duration","isPositiveInteger","TypeError","format","period","amplitude","isPositiveNumber","offset","isInteger","iter","isNonNegativeInteger","bartlettHann","t","T","A","abs","cospi","isNonNegativeNumber","flatTop","tau","s","min","isNumber","isnan","max","isEven","ns","setReadOnly","iterawgn","iterator","sigma","rnorm","FLG","isIteratorLike","copy","arguments","length","isBoolean","isFunction","prng","state","isUint32Array","seed","randn","next","end","iteratorSymbol","factory","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","PRNG","seedLength","stateLength","byteLength","v","done","value","NaN","iterawln","rlaplace","laplace","SQRT_TWO","iterawun","runif","a","randu","SQRT_THREE","iterBartlettHannPulse","err","i","RangeError","iterBartlettPulse","iterCosineWave","iterDiracComb","PINF","iterFlatTopPulse","iterHannPulse","iterLanczosPulse","sinc","iterPeriodicSinc","n","sgn","hwf","hw","floor","next2","next1","sinpi","iterPulse","iterSawtoothWave","PI","HALF_PI","atan","tan","iterSineWave","iterSquareWave","h","iterTriangleWave","asin","iterators"],"mappings":"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"}