{"version":3,"file":"index.mjs","sources":["../iter/bartlett-hann-pulse/lib/main.js","../iter/flat-top-pulse/lib/main.js","../iter/lib/index.js","../iter/awgn/lib/main.js","../iter/awgn/lib/defaults.js","../iter/awln/lib/main.js","../iter/awln/lib/defaults.js","../iter/awun/lib/main.js","../iter/awun/lib/defaults.js","../iter/bartlett-hann-pulse/lib/validate.js","../iter/bartlett-pulse/lib/main.js","../iter/bartlett-pulse/lib/validate.js","../iter/cosine-wave/lib/main.js","../iter/cosine-wave/lib/validate.js","../iter/dirac-comb/lib/main.js","../iter/dirac-comb/lib/validate.js","../iter/flat-top-pulse/lib/validate.js","../iter/hann-pulse/lib/main.js","../iter/hann-pulse/lib/validate.js","../iter/lanczos-pulse/lib/main.js","../iter/lanczos-pulse/lib/validate.js","../iter/periodic-sinc/lib/main.js","../iter/periodic-sinc/lib/validate.js","../iter/pulse/lib/main.js","../iter/pulse/lib/validate.js","../iter/sawtooth-wave/lib/main.js","../iter/sawtooth-wave/lib/validate.js","../iter/sine-wave/lib/main.js","../iter/sine-wave/lib/validate.js","../iter/square-wave/lib/main.js","../iter/square-wave/lib/validate.js","../iter/triangle-wave/lib/main.js","../iter/triangle-wave/lib/validate.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport abs from '@stdlib/math/base/special/abs';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar A0 = 0.62;\nvar A1 = 0.48;\nvar A2 = 0.38;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates a Bartlett-Hann window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {integer} T - period\n* @param {number} A - amplitude\n* @returns {number} function value\n*/\nfunction bartlettHann( t, T, A ) {\n\tT -= 1;\n\treturn A * ( A0 - (A1*abs( (t/T)-0.5) ) - (A2*cospi( (2.0/T)*t) ) );\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett-Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? bartlettHann( t, opts.duration, opts.amplitude ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterBartlettHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar A0 = 0.21557895;\nvar A1 = 0.41663158;\nvar A2 = 0.277263158;\nvar A3 = 0.083578947;\nvar A4 = 0.006947368;\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the flat top window function.\n*\n* @private\n* @param {integer} t - value at which to evaluate the function\n* @param {number} A - amplitude\n* @param {integer} tau - period\n* @returns {number} function value\n*/\nfunction flatTop( t, A, tau ) {\n\tvar s = 2.0 / (tau-1);\n\treturn A * (A0 - (A1*cospi(s*t)) + (A2*cospi(2.0*s*t)) - (A3*cospi(3.0*s*t)) + (A4*cospi(4.0*s*t))); // eslint-disable-line max-len\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a flat top pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterFlatTopPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterFlatTopPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? flatTop( t, opts.amplitude, opts.duration ) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFlatTopPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterFlatTopPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterawgn\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awgn}\n*/\nimport iterawgn from './../../iter/awgn';\nsetReadOnly( ns, 'iterawgn', iterawgn );\n\n/**\n* @name iterawln\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awln}\n*/\nimport iterawln from './../../iter/awln';\nsetReadOnly( ns, 'iterawln', iterawln );\n\n/**\n* @name iterawun\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/awun}\n*/\nimport iterawun from './../../iter/awun';\nsetReadOnly( ns, 'iterawun', iterawun );\n\n/**\n* @name iterBartlettHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-hann-pulse}\n*/\nimport iterBartlettHannPulse from './../../iter/bartlett-hann-pulse';\nsetReadOnly( ns, 'iterBartlettHannPulse', iterBartlettHannPulse );\n\n/**\n* @name iterBartlettPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/bartlett-pulse}\n*/\nimport iterBartlettPulse from './../../iter/bartlett-pulse';\nsetReadOnly( ns, 'iterBartlettPulse', iterBartlettPulse );\n\n/**\n* @name iterCosineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/cosine-wave}\n*/\nimport iterCosineWave from './../../iter/cosine-wave';\nsetReadOnly( ns, 'iterCosineWave', iterCosineWave );\n\n/**\n* @name iterDiracComb\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/dirac-comb}\n*/\nimport iterDiracComb from './../../iter/dirac-comb';\nsetReadOnly( ns, 'iterDiracComb', iterDiracComb );\n\n/**\n* @name iterFlatTopPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/flat-top-pulse}\n*/\nimport iterFlatTopPulse from './../../iter/flat-top-pulse';\nsetReadOnly( ns, 'iterFlatTopPulse', iterFlatTopPulse );\n\n/**\n* @name iterHannPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/hann-pulse}\n*/\nimport iterHannPulse from './../../iter/hann-pulse';\nsetReadOnly( ns, 'iterHannPulse', iterHannPulse );\n\n/**\n* @name iterLanczosPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/lanczos-pulse}\n*/\nimport iterLanczosPulse from './../../iter/lanczos-pulse';\nsetReadOnly( ns, 'iterLanczosPulse', iterLanczosPulse );\n\n/**\n* @name iterPeriodicSinc\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/periodic-sinc}\n*/\nimport iterPeriodicSinc from './../../iter/periodic-sinc';\nsetReadOnly( ns, 'iterPeriodicSinc', iterPeriodicSinc );\n\n/**\n* @name iterPulse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/pulse}\n*/\nimport iterPulse from './../../iter/pulse';\nsetReadOnly( ns, 'iterPulse', iterPulse );\n\n/**\n* @name iterSawtoothWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sawtooth-wave}\n*/\nimport iterSawtoothWave from './../../iter/sawtooth-wave';\nsetReadOnly( ns, 'iterSawtoothWave', iterSawtoothWave );\n\n/**\n* @name iterSineWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/sine-wave}\n*/\nimport iterSineWave from './../../iter/sine-wave';\nsetReadOnly( ns, 'iterSineWave', iterSineWave );\n\n/**\n* @name iterSquareWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/square-wave}\n*/\nimport iterSquareWave from './../../iter/square-wave';\nsetReadOnly( ns, 'iterSquareWave', iterSquareWave );\n\n/**\n* @name iterTriangleWave\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/simulate/iter/triangle-wave}\n*/\nimport iterTriangleWave from './../../iter/triangle-wave';\nsetReadOnly( ns, 'iterTriangleWave', iterTriangleWave );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport { factory as randn } from '@stdlib/random/base/improved-ziggurat';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Gaussian noise with standard deviation `sigma`.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates pseudorandom numbers drawn from a standard normal distribution\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawgn( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawgn( iterator, sigma, options ) {\n\tvar rnorm;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\trnorm = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( rnorm === void 0 ) {\n\t\trnorm = randn( opts );\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', null );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rnorm.PRNG );\n\t}\n\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rnorm.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rnorm.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rnorm.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rnorm.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rnorm.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trnorm.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + ( sigma*rnorm() );\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawgn( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawgn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport { factory as laplace } from '@stdlib/random/base/laplace';\nimport format from '@stdlib/string/format';\nimport SQRT_TWO from '@stdlib/constants/float64/sqrt-two';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white Laplacian noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a Laplace (biexponential or double-exponential) distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = 2b^2\n*     ```\n*\n*     where \\\\( b \\\\) is the distribution scale parameter.\n*\n* -   Accordingly, the standard deviation is then\n*\n*     ```tex\n*     \\sigma = b\\sqrt{2}\n*     ```\n*\n* -   Solving for \\\\( b \\\\), we derive the parameter transform necessary for generating a Laplacian random variable with standard deviation \\\\( \\sigma \\\\)\n*\n*     ```tex\n*     b = \\frac{\\sigma}{\\sqrt{2}}\n*     ```\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawln( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawln( iterator, sigma, options ) {\n\tvar rlaplace;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\trlaplace = laplace( 0.0, sigma/SQRT_TWO, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', rlaplace.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rlaplace.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rlaplace.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rlaplace.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rlaplace.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rlaplace.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trlaplace.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + rlaplace();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawln( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawln;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils/define-nonenumerable-read-write-accessor';\nimport isIteratorLike from '@stdlib/assert/is-iterator-like';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport { isPrimitive as isBoolean } from '@stdlib/assert/is-boolean';\nimport isUint32Array from '@stdlib/assert/is-uint32array';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport noop from '@stdlib/utils/noop';\nimport constantFunction from '@stdlib/utils/constant-function';\nimport format from '@stdlib/string/format';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport { factory as randu } from '@stdlib/random/base/uniform';\nimport SQRT_THREE from '@stdlib/constants/float64/sqrt-three';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which introduces additive white uniform noise with standard deviation `sigma`.\n*\n* ## Method\n*\n* -   The variance of a uniform distribution is given by\n*\n*     ```tex\n*     \\operatorname{Var} = \\frac{(b-a)^2}{12}\n*     ```\n*\n*     where \\\\( a \\\\) is the minimum support and \\\\( b \\\\) is the maximum support.\n*\n* -   Accordingly, to generate uniform noise having zero mean and a desired standard deviation, we let \\\\( a = -b \\\\) and solve for \\\\( b \\\\).\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sigma &= \\frac{b-a}{\\sqrt{12}} \\\\\n*     \\sigma \\sqrt{12} &= b - a \\\\\n*     2 \\sigma \\sqrt{3} &= b - (-b) \\\\\n*     2 \\sigma \\sqrt{3} &= 2b \\\\\n*     b &= \\sigma \\sqrt{3}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\( \\sigma \\\\) is the standard deviation.\n*\n* -   Thus, to generate uniform noise having zero mean and a desired standard deviation, we sample from \\\\( \\operatorname{unif}(-sigma\\sqrt{3}, sigma\\sqrt{3}) \\\\).\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveNumber} sigma - standard deviation of the noise\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers on the interval `[0,1)`\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive number\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Iterator} iterator\n*\n* @example\n* import iterSineWave from '@stdlib/simulate/iter/sine-wave';\n*\n* var sine = iterSineWave({\n*     'iter': 100\n* });\n*\n* var it = iterawun( sine, 0.5 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterawun( iterator, sigma, options ) {\n\tvar runif;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar a;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( options.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', options.copy ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\tif ( !isFunction( options.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', options.prng ) );\n\t\t\t}\n\t\t\topts.prng = options.prng;\n\t\t}\n\t\t// If provided a PRNG, ignore the `state` option, as we don't support getting or setting PRNG state.\n\t\telse if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( !isUint32Array( options.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', options.state ) );\n\t\t\t}\n\t\t}\n\t\t// If provided a PRNG, ignore the `seed` option, as a `seed`, by itself, is insufficient to guarantee reproducibility. If provided a state, ignore the `seed` option, as a PRNG state should contain seed information.\n\t\telse if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( options.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.', 'seed', options.seed ) );\n\t\t\t}\n\t\t}\n\t}\n\ta = sigma * SQRT_THREE;\n\trunif = randu( -a, a, opts );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( options && options.prng ) {\n\t\tsetReadOnly( iter, 'seed', null );\n\t\tsetReadOnly( iter, 'seedLength', null );\n\t\tsetReadWriteAccessor( iter, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( iter, 'stateLength', null );\n\t\tsetReadOnly( iter, 'byteLength', null );\n\t\tsetReadOnly( iter, 'PRNG', options.prng );\n\t} else {\n\t\tsetReadOnlyAccessor( iter, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( iter, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( iter, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( iter, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( iter, 'byteLength', getStateSize );\n\t\tsetReadOnly( iter, 'PRNG', runif.PRNG );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn runif.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn runif.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn runif.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn runif.byteLength;\n\t}\n\n\t/**\n\t* Returns the current PRNG state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn runif.state;\n\t}\n\n\t/**\n\t* Sets the PRNG state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trunif.state = s;\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = v.value + runif();\n\t\t} else {\n\t\t\tv = NaN;\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterawun( iterator[ iteratorSymbol ](), sigma, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterawun;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'copy': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport abs from '@stdlib/math/base/special/abs';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Bartlett pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterBartlettPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterBartlettPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*(1.0-abs((s*t)-1.0)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterBartlettPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterBartlettPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a cosine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterCosineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterCosineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * cospi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterCosineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterCosineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a cosine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport PINF from '@stdlib/constants/float64/pinf';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Dirac comb.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterDiracComb( opts );\n*\n* var v = iter.next().value;\n* // returns Infinity\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterDiracComb( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,T]\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': ( t === 0 ) ? PINF : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterDiracComb( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterDiracComb;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport cospi from '@stdlib/math/base/special/cospi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Hann pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterHannPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterHannPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar A;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tA = 0.5 * opts.amplitude;\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? A*(1.0-cospi(s*t)) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterHannPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterHannPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport sinc from '@stdlib/math/base/special/sinc';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a Lanczos pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=100] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=options.period] - pulse duration\n* @param {PositiveNumber} [options.amplitude=1.0] - amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @throws {RangeError} pulse duration must be greater than `2`\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 10\n* };\n*\n* var iter = iterLanczosPulse( opts );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterLanczosPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = opts.period;\n\t}\n\tif ( opts.duration > opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than or equal to the period. Option: `%u`.', 'duration', opts.duration ) );\n\t}\n\tif ( opts.duration <= 2 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be greater than 2. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\ts = 2.0 / (opts.duration-1);\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.amplitude*sinc((s*t)-1.0) : 0.0,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLanczosPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterLanczosPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert/is-positive-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - pulse duration\n* @param {PositiveNumber} [options.amplitude] - amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isPositiveNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport isEven from '@stdlib/math/base/assert/is-even';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport floor from '@stdlib/math/base/special/floor';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a periodic sinc waveform.\n*\n* ## Method\n*\n* -   The periodic sinc function, or Dirichlet function, is defined as\n*\n*     ```tex\n*     D_N(x; A) = \\begin{cases}\n*     A \\cdot \\frac{\\sin(Nx/2)}{N\\sin(x/2)} & x \\neq 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots \\\\\n*     A \\cdot (-1)^{k(N-1)} & x = 2\\pi k\\ \\textrm{for} k = 0, \\pm 1, \\pm 2, \\pm 3, \\ldots\n*     \\end{cases}\n*     ```\n*\n*     where, for odd \\\\( N \\\\), the waveform period is \\\\( 2\\pi \\\\), and, for even \\\\( N \\\\), the waveform period is \\\\( 4\\pi \\\\).\n*\n* -   In order to evaluate the periodic sinc function in terms of an iteration number \\\\( t \\\\) and a specified period (period \\\\( \\tau \\\\)), rather than radians, for odd \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{2\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and, for even \\\\( N \\\\), we define\n*\n*     ```tex\n*     x = \\frac{4\\pi(t-\\varphi)}{\\tau}\n*     ```\n*\n*     and substitute accordingly.\n*\n* @param {PositiveInteger} n - order\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterPeriodicSinc( 7 );\n*\n* var v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* v = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterPeriodicSinc( n, options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar sgn;\n\tvar hwf;\n\tvar hw;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\tif ( !isPositiveInteger( n ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', n ) );\n\t}\n\topts = {\n\t\t'period': 100,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tif ( isEven( n ) ) {\n\t\tif ( opts.offset >= 0 ) {\n\t\t\tsgn = -1.0;\n\t\t} else {\n\t\t\tsgn = 1.0;\n\t\t}\n\t\t// Note: when `n` is even, the waveform period (in radians) is 4π, so we need to adjust the \"period\" parameter to ensure that the waveform repeats within the specified number of iterations:\n\t\thw = opts.period / 2;\n\t\thwf = floor( hw ); // note: τ could be an odd number; in which case, negative peaks happen \"between\" two iterations (t%τ and t%(τ+1))\n\t\ts = n / hw;\n\t} else {\n\t\ts = n / opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', ( sgn === void 0 ) ? next2 : next1 );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next1() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 || t === hw ) {\n\t\t\tsgn *= -1.0;\n\t\t\tv = sgn * opts.amplitude;\n\t\t} else {\n\t\t\tif ( t === hwf ) {\n\t\t\t\t// We just passed a negative peak, so we need flip the sign in order to ensure that the waveform at `t%τ=0` is the correct sign:\n\t\t\t\tsgn *= -1.0;\n\t\t\t}\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/hw) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next2() {\n\t\tvar v;\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\tif ( t === 0 ) {\n\t\t\tv = opts.amplitude;\n\t\t} else {\n\t\t\tv = opts.amplitude * sinpi(s*t) / ( n*sinpi(t/opts.period) );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPeriodicSinc( n, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterPeriodicSinc;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport format from '@stdlib/string/format';\nimport floor from '@stdlib/math/base/special/floor';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a pulse waveform.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration=floor(options.period/2)] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min=0.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} pulse duration must be less than the period\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterPulse( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterPulse( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar i;\n\n\topts = {\n\t\t'duration': -1,\n\t\t'period': 10,\n\t\t'min': 0.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.duration === -1 ) {\n\t\topts.duration = floor( opts.period/2 );\n\t}\n\tif ( opts.duration >= opts.period ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be less than the period. Option: `%s`.', 'duration', opts.duration ) );\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt = (t+1) % opts.period;\n\t\treturn {\n\t\t\t'value': ( t < opts.duration ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterPulse( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterPulse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {PositiveInteger} [options.duration] - number of consecutive iterations of maximum amplitude during one period\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'duration' ) ) {\n\t\topts.duration = options.duration;\n\t\tif ( !isPositiveInteger( options.duration ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'duration', options.duration ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport tan from '@stdlib/math/base/special/tan';\nimport atan from '@stdlib/math/base/special/atan';\nimport HALF_PI from '@stdlib/constants/float64/half-pi';\nimport PI from '@stdlib/constants/float64/pi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sawtooth wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSawtoothWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns ~0.5\n*\n* v = iter.next().value;\n* // returns ~1.0\n*\n* // ...\n*/\nfunction iterSawtoothWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = PI / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * atan( tan( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSawtoothWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSawtoothWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a sine wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSineWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterSineWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': opts.amplitude * sinpi( s*t ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSineWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSineWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a sine wave repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a square wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a square wave repeats (this must be a positive even integer)\n* @param {number} [options.min=-1.0] - minimum amplitude\n* @param {number} [options.max=1.0] - maximum amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterSquareWave( opts );\n*\n* var v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns -1.0\n*\n* // ...\n*/\nfunction iterSquareWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar h;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'min': -1.0,\n\t\t'max': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period;\n\t}\n\tt -= 1;\n\th = opts.period / 2;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\treturn {\n\t\t\t'value': ( (t%opts.period) < h ) ? opts.max : opts.min,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterSquareWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterSquareWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert/is-number';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isEven from '@stdlib/math/base/assert/is-even';\nimport isnan from '@stdlib/math/base/assert/is-nan';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a square wave repeats\n* @param {number} [options.min] - minimum amplitude\n* @param {number} [options.max] - maximum amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) || !isEven( options.period ) ) { // eslint-disable-line max-len\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive even integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'min' ) ) {\n\t\topts.min = options.min;\n\t\tif ( !isNumber( options.min ) || isnan( options.min ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'min', options.min ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'max' ) ) {\n\t\topts.max = options.max;\n\t\tif ( !isNumber( options.max ) || isnan( options.max ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'max', options.max ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport iteratorSymbol from '@stdlib/symbol/iterator';\nimport sinpi from '@stdlib/math/base/special/sinpi';\nimport asin from '@stdlib/math/base/special/asin';\nimport HALF_PI from '@stdlib/constants/float64/half-pi';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which generates a triangle wave.\n*\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.period=10] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude=1.0] - peak amplitude\n* @param {integer} [options.offset=0] - phase offset (in units of iterations; zero-based)\n* @param {NonNegativeInteger} [options.iter=1e308] - number of iterations\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var opts = {\n*     'period': 4\n* };\n*\n* var iter = iterTriangleWave( opts );\n*\n* var v = iter.next().value;\n* // returns 0.0\n*\n* v = iter.next().value;\n* // returns 1.0\n*\n* v = iter.next().value;\n* // returns 0.0\n*\n* // ...\n*/\nfunction iterTriangleWave( options ) {\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar err;\n\tvar t;\n\tvar s;\n\tvar a;\n\tvar i;\n\n\topts = {\n\t\t'period': 10,\n\t\t'amplitude': 1.0,\n\t\t'offset': 0,\n\t\t'iter': 1e308\n\t};\n\tif ( arguments.length ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tt = ( opts.period-opts.offset ) % opts.period;\n\tif ( t < 0 ) {\n\t\tt += opts.period; // normalize such that t ϵ [0,τ]\n\t}\n\tt -= 1;\n\ts = 2.0 / opts.period;\n\ta = opts.amplitude / HALF_PI;\n\ti = 0;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i > opts.iter ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tt += 1;\n\t\tt %= opts.period;\n\t\treturn {\n\t\t\t'value': a * asin( sinpi( s*t ) ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterTriangleWave( opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterTriangleWave;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isInteger } from '@stdlib/assert/is-integer';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert/is-positive-integer';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert/is-nonnegative-number';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {PositiveInteger} [options.period] - number of iterations before a waveform repeats\n* @param {NonNegativeNumber} [options.amplitude] - peak amplitude\n* @param {integer} [options.offset] - phase offset (in units of iterations)\n* @param {NonNegativeInteger} [options.iter] - number of iterations\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'iter': 100\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'period' ) ) {\n\t\topts.period = options.period;\n\t\tif ( !isPositiveInteger( options.period ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an positive integer. Option: `%s`.', 'period', options.period ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'amplitude' ) ) {\n\t\topts.amplitude = options.amplitude;\n\t\tif ( !isNonNegativeNumber( options.amplitude ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'amplitude', options.amplitude ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'offset' ) ) {\n\t\topts.offset = options.offset;\n\t\tif ( !isInteger( options.offset ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'offset', options.offset ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iter' ) ) {\n\t\topts.iter = options.iter;\n\t\tif ( !isNonNegativeInteger( options.iter ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'iter', options.iter ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name iterators\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/simulate/iter}\n*/\nimport iterators from './../iter';\nsetReadOnly( ns, 'iterators', iterators );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["A0","A1","A2","bartlettHann","t","T","A","abs","cospi","A3","A4","flatTop","tau","s","ns","setReadOnly","iterawgn","iterator","sigma","options","rnorm","opts","iter","FLG","isIteratorLike","TypeError","format","isPositiveNumber","copy","arguments","length","isPlainObject","hasOwnProp","isBoolean","isFunction","prng","state","isUint32Array","seed","randn","v","done","next","value","NaN","iteratorSymbol","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","seedLength","stateLength","byteLength","PRNG","iterawln","rlaplace","laplace","SQRT_TWO","iterawun","runif","a","randu","SQRT_THREE","iterBartlettHannPulse","err","i","duration","period","amplitude","offset","isPositiveInteger","isInteger","isNonNegativeInteger","validate","RangeError","iterBartlettPulse","iterCosineWave","isNonNegativeNumber","iterDiracComb","PINF","iterFlatTopPulse","iterHannPulse","iterLanczosPulse","sinc","iterPeriodicSinc","n","sgn","hwf","hw","isEven","floor","sinpi","iterPulse","min","max","isNumber","isnan","iterSawtoothWave","PI","HALF_PI","atan","tan","iterSineWave","iterSquareWave","h","iterTriangleWave","asin","iterators"],"mappings":"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"}